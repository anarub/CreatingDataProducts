---
runtime: shiny
output:html_document
---
```{r}
library (shiny)
```


Probability Visualiser
========================================================
author: Anaru.b
date: 22 November 2015
transition: rotate
transition-speed: slow

```{r, echo=FALSE, out.width = '900px', out.height = '300px'}
CI95<-function(prob,hours,CI) qbinom(c((1-CI)/2,(CI+(1-CI)/2)), hours, prob, lower.tail = TRUE)
##The second is used to calculate probability distributions for the graphs.
probf<-function(fail1,fail2,prob,hours) pbinom(c(fail1:fail2), hours, prob, lower.tail = TRUE)-pbinom(c((fail1-1):(fail2-1)), hours, prob, lower.tail = TRUE)

#set parameters
prob2<-0.025
prob1<-0.03
hours<-8000
failure<-c(150,300)
CI<-0.95
                        plot(failure[1]:failure[2],probf(failure[1],failure[2],prob2,hours),col="red",
                             ylab="Probability",xlab="Defects per Batch",
                             main="Probability of Defect with Confidence Intervals")
                        ##Adds Blue probability distribution.
                        points(failure[1]:failure[2],probf(failure[1],failure[2],prob1,hours),col="blue")
                        ##Adds confidence intervals
                        abline(v=c((CI95(prob1,hours,CI))),col="blue",lwd=1)
                        abline(v=c((CI95(prob2,hours,CI))),col="red",lwd=1)

```

Why use this App?
========================================================


This app assists with discussion around process change.
It is designed to promote understanding of statistical concepts by allowing participants to interact with

- Probabilities
- Batch Size
- Confidence intervals

And visualise the effect on the probability distribution caused by these changes.

[Really cool App](https://anarub.shinyapps.io/Trial1) 

Traditional mathmatical methods for decision making can be a bit like Witchcraft.
========================================================

Below is an equation that provides a sample size needed to assess if p really is 0.025. It has error terms, confidence interval and even zstars, what ever they are.

Who really understands this stuff?

```{r, echo=TRUE}
zstar=qnorm(.975);p=0.025;E=0.005
output<-round(zstar^2 * p *(1 - p)/E^2,-2)
```
All the CEO sees is that you want to have a trial involving around `r output` units at $100 each.

[This App will save your job!](https://anarub.shinyapps.io/Trial1) 


And thats why you need a Graph!
========================================================
left: 50%
```{r, echo=FALSE}

#set parameters
prob2<-0.25
prob1<-0.3
hours<-1400
failure<-c(300,470)
CI<-0.95
                        plot(failure[1]:failure[2],probf(failure[1],failure[2],prob2,hours),col="red",
                             ylab="Probability",xlab="Defects per Batch",
                             main="Probability of Defect with Confidence Intervals")
                        ##Adds Blue probability distribution.
                        points(failure[1]:failure[2],probf(failure[1],failure[2],prob1,hours),col="blue")
                        ##Adds confidence intervals
                        abline(v=c((CI95(prob1,hours,CI))),col="blue",lwd=1)
                        abline(v=c((CI95(prob2,hours,CI))),col="red",lwd=1)
```
***
While this graph is pretty cool, we're taking it one step further!

[But wait there's more!](https://anarub.shinyapps.io/Trial1) 

We got Widgets!
========================================================
left: 50%
The power of widgets is that they easily allow you to manuplate the parameters of your graph, there by improving understanding.

The below link will take you to this fabulous product. Please send no money now.

[Widgets this way!](https://anarub.shinyapps.io/Trial1) 
***
And they're flasher than the widget below:

```{r, echo=FALSE}
inputPanel(
        numericInput('prob2', 'RED: Proposed probability of         producing defective unit', 0.025, min = 0, max = 0.5, step = 0.002),
        numericInput('prob1', 'BLUE: Existing probability of producing defective unit', 0.03, min = 0, max = 0.5, step = 0.002)
        )
```



